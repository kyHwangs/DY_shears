#include "standalone_LumiReWeighting.h"

#include <iostream>
#include <vector>

#include <TFile.h>
#include <TH1.h>
#include <TROOT.h>

// Set the pileup numbers here
double Data_2016_75Bin[75] = {
    6.54008e-06, 2.29383e-05, 6.32223e-05, 8.55796e-05, 0.000122592, 0.000164214, 0.000191738,
    0.000353072, 0.000965735, 0.00215544,  0.00484612,  0.00986199,  0.0165083,   0.0240058,
    0.0321661,   0.0407818,   0.0481844,   0.0532395,   0.0561219,   0.0575573,   0.058412,
    0.0588587,   0.0583078,   0.056491,    0.0537587,   0.0504445,   0.0466722,   0.0425747,
    0.0383287,   0.0340574,   0.0298202,   0.0256705,   0.0216922,   0.0179859,   0.0146378,
    0.011698,    0.00917774,  0.00705846,  0.00530639,  0.00388441,  0.00275715,  0.00189013,
    0.00124723,  0.000790064, 0.000479456, 0.00027833,  0.000154405, 8.18145e-05, 4.14101e-05,
    2.00435e-05, 9.30691e-06, 4.17785e-06, 1.84606e-06, 8.3504e-07,  4.1498e-07,  2.45829e-07,
    1.77914e-07, 1.48846e-07, 1.33924e-07, 1.23839e-07, 1.1526e-07,  1.07079e-07, 9.89863e-08,
    9.09467e-08, 8.30145e-08, 7.52676e-08, 6.77837e-08, 6.06312e-08, 5.38664e-08, 4.75325e-08,
    4.16595e-08, 3.62653e-08, 3.1356e-08,  2.69281e-08, 2.29691e-08};
double Data_2016_75Bin_up[75] = {
    6.36738e-06, 1.791e-05,   5.96778e-05, 7.48627e-05, 0.000111141, 0.000147297, 0.000174383,
    0.000244988, 0.000641801, 0.00145964,  0.00313022,  0.00664234,  0.0120019,   0.0184484,
    0.0254731,   0.0331281,   0.0408693,   0.0471696,   0.051383,    0.0537788,   0.0550037,
    0.0557688,   0.0561817,   0.0557359,   0.0541758,   0.0517754,   0.0488409,   0.0454911,
    0.0418221,   0.0379803,   0.0340885,   0.0302104,   0.0263853,   0.0226707,   0.0191466,
    0.0158944,   0.012975,    0.0104179,   0.00822324,  0.00637088,  0.00483131,  0.00357382,
    0.00256928,  0.00178905,  0.0012031,   0.00077952,  0.000485761, 0.000290742, 0.000166985,
    9.1982e-05,  4.85913e-05, 2.46338e-05, 1.20087e-05, 5.65663e-06, 2.60325e-06, 1.19912e-06,
    5.7966e-07,  3.15854e-07, 2.05819e-07, 1.59276e-07, 1.37772e-07, 1.25666e-07, 1.16875e-07,
    1.09147e-07, 1.01708e-07, 9.43372e-08, 8.7012e-08,  7.97785e-08, 7.27011e-08, 6.58448e-08,
    5.92677e-08, 5.30186e-08, 4.71359e-08, 4.16474e-08, 3.65712e-08};
double Data_2016_75Bin_dn[75] = {
    6.78636e-06, 2.95397e-05, 6.66311e-05, 9.81548e-05, 0.000137303, 0.000181169, 0.000223348,
    0.000555878, 0.00144232,  0.00333402,  0.0075878,   0.0142298,   0.022196,    0.0309112,
    0.0403801,   0.0490472,   0.0551515,   0.0586526,   0.060356,    0.061318,    0.0618025,
    0.0611204,   0.0589958,   0.0558722,   0.0521085,   0.0478427,   0.0432573,   0.0385556,
    0.0338554,   0.0292184,   0.024725,    0.0204915,   0.0166341,   0.0132328,   0.0103171,
    0.00787363,  0.00586471,  0.00424535,  0.00297214,  0.00200314,  0.00129458,  0.000799764,
    0.000471201, 0.000264323, 0.00014102,  7.15224e-05, 3.44959e-05, 1.5851e-05,  6.97461e-06,
    2.97629e-06, 1.26951e-06, 5.76548e-07, 3.06621e-07, 2.03465e-07, 1.62507e-07, 1.43476e-07,
    1.31689e-07, 1.22086e-07, 1.13043e-07, 1.04117e-07, 9.52529e-08, 8.6516e-08,  7.80011e-08,
    6.98015e-08, 6.19982e-08, 5.46564e-08, 4.78247e-08, 4.15349e-08, 3.58033e-08, 3.06327e-08,
    2.60136e-08, 2.19265e-08, 1.83438e-08, 1.52323e-08, 1.25545e-08};
double MC_2016_75Bin[75] = {
    1.00402360149e-05, 5.76498797172e-05, 7.37891400294e-05, 0.000110932895295, 0.000158857714773,
    0.000368637432599, 0.000893114107873, 0.00189700774575, 0.00358880167437, 0.00636052573486,
    0.0104173961179, 0.0158122597405, 0.0223785660712, 0.0299186888073, 0.0380275944896,
    0.0454313901624, 0.0511181088317, 0.0547434577348, 0.0567906239028, 0.0577145461461,
    0.0578176902735, 0.0571251566494, 0.0555456541498, 0.053134383488, 0.0501519041462,
    0.0466815838899, 0.0429244592524, 0.0389566776898, 0.0348507152776, 0.0307356862528,
    0.0267712092206, 0.0229720184534, 0.0193388653099, 0.0159602510813, 0.0129310510552,
    0.0102888654183, 0.00798782770975, 0.00606651703058, 0.00447820948367, 0.00321589786478,
    0.0022450422045, 0.00151447388514, 0.000981183695515, 0.000609670479759, 0.000362193408119,
    0.000211572646801, 0.000119152364744, 6.49133515399e-05, 3.57795801581e-05, 1.99043569043e-05,
    1.13639319832e-05, 6.49624103579e-06, 3.96626216416e-06, 2.37910222874e-06, 1.50997403362e-06,
    1.09816650247e-06, 7.31298519122e-07, 6.10398791529e-07, 3.74845774388e-07, 2.65177281359e-07,
    2.01923536742e-07, 1.39347583555e-07, 8.32600052913e-08, 6.04932421298e-08, 6.52536630583e-08,
    5.90574603808e-08, 2.29162474068e-08, 1.97294602668e-08, 1.7731096903e-08, 3.57547932012e-09,
    1.35039815662e-09, 8.50071242076e-09, 5.0279187473e-09, 4.93736669066e-10, 8.13919708923e-10};
double Data_2017_75Bin[75] = {
    1.95088e-06, 7.20151e-06, 1.74858e-05, 4.82632e-05, 7.56055e-05, 0.000115816, 0.000147287,
    0.000167442, 0.000190898, 0.000258208, 0.000457253, 0.000944773, 0.0019013,   0.00350048,
    0.00584088,  0.00902777,  0.0133015,   0.0185945,   0.0241049,   0.0292006,   0.0335565,
    0.0367282,   0.0386842,   0.0400315,   0.0413599,   0.0428662,   0.0444104,   0.0456897,
    0.0464219,   0.0464031,   0.0455355,   0.0438621,   0.0415167,   0.0386401,   0.0353662,
    0.0318563,   0.0283019,   0.0248866,   0.021749,    0.0189693,   0.0165773,   0.014567,
    0.0129094,   0.0115609,   0.0104696,   0.00957861,  0.00883025,  0.00816953,  0.00754894,
    0.00693228,  0.00629735,  0.00563751,  0.00495892,  0.0042783,   0.00361694,  0.00299602,
    0.00243279,  0.00193848,  0.00151771,  0.00116931,  0.000887786, 0.000665127, 0.000492275,
    0.00036026,  0.000260884, 0.000187052, 0.000132857, 9.35277e-05, 6.52898e-05, 4.52196e-05,
    3.10889e-05, 2.12267e-05, 1.43987e-05, 9.70612e-06, 6.50284e-06};
double MC_2017_75Bin[75] = {
    0.0234966,   0.00081921,  0.000889446, 0.00145393,  0.00149256,  0.00143781,  0.00134815,
    0.00119999,  0.00208996,  0.00162345,  0.0024294,   0.00331759,  0.00482649,  0.00646959,
    0.00858284,  0.0110805,   0.0140033,   0.0166959,   0.0192814,   0.0215594,   0.0233492,
    0.0243251,   0.0252989,   0.0259835,   0.0266354,   0.0276736,   0.0284194,   0.0286945,
    0.0285962,   0.0286576,   0.0283795,   0.0286665,   0.0286458,   0.0284396,   0.0281127,
    0.0273074,   0.0263188,   0.0250914,   0.0244387,   0.0232245,   0.0216261,   0.019673,
    0.0179862,   0.0162893,   0.0147218,   0.0133369,   0.0123729,   0.0120994,   0.0117789,
    0.0117247,   0.0119692,   0.0118664,   0.0117875,   0.0117831,   0.0115836,   0.0118988,
    0.0117201,   0.0114246,   0.0109984,   0.0102324,   0.00919294,  0.00791305,  0.00640953,
    0.00532891,  0.00431252,  0.00357535,  0.00304912,  0.00216272,  0.00172678,  0.00121032,
    0.000890189, 0.000838004, 0.000476275, 0.000302635, 0.00034598};

standalone_LumiReWeighting::standalone_LumiReWeighting(int year, int mode, int nBin)
{

    // Add the pileup distributions to the map
    pileupMap.insert(std::pair<std::string, double *>("Data_2016_75Bin", Data_2016_75Bin));
    pileupMap.insert(std::pair<std::string, double *>("Data_2016_75Bin_up", Data_2016_75Bin_up));
    pileupMap.insert(std::pair<std::string, double *>("Data_2016_75Bin_dn", Data_2016_75Bin_dn));
    pileupMap.insert(std::pair<std::string, double *>("MC_2016_75Bin", MC_2016_75Bin));

    pileupMap.insert(std::make_pair("Data_2017_75Bin", Data_2017_75Bin));
    pileupMap.insert(std::make_pair("MC_2017_75Bin", MC_2017_75Bin));

    std::vector<double> MC_distr;
    std::vector<double> Lumi_distr;

    MC_distr.clear();
    Lumi_distr.clear();

    printf("standalone_LumiReWeighting Mode = %d\n", mode);

    char tmpName[50];
    char tmpNameMC[50];
    snprintf(tmpNameMC, 50, "%d_%dBin", year, nBin);
    switch (mode) {
    case 0:
        snprintf(tmpName, 50, "%d_%dBin", year, nBin);
        break;
    case 1:
        snprintf(tmpName, 50, "%d_%dBin_up", year, nBin);
        break;
    case -1:
        snprintf(tmpName, 50, "%d_%dBin_dn", year, nBin);
        break;
    default:
        printf("Mode for standalone lumi reweighting is incorrect\n");
        abort();
        break;
    }
    std::string dataName = "Data_";
    dataName += tmpName;
    std::string mcName = "MC_";
    mcName += tmpNameMC;

    std::cout << "standalone_LumiReWeighting dataName = " << dataName << std::endl;
    std::cout << "standalone_LumiReWeighting mcName = " << mcName << std::endl;

    for (int i = 0; i < nBin; ++i) {
        Lumi_distr.push_back(pileupMap[dataName][i]);
        MC_distr.push_back(pileupMap[mcName][i]);
    }

    // first, check they are the same size...
    if (MC_distr.size() != Lumi_distr.size()) {
        std::cout << "MC_distr.size() = " << MC_distr.size() << std::endl;
        std::cout << "Lumi_distr.size() = " << Lumi_distr.size() << std::endl;
        std::cerr << "ERROR:standalone_LumiReWeighting: input vectors have different sizes. "
                     "Quitting... \n";
    }

    weights_ =
        new TH1D(Form("luminumer_%d", mode), Form("luminumer_%d", mode), nBin, 0., double(nBin));

    weights_->SetBit(TH1::kIsAverage);

    TH1D *den =
        new TH1D(Form("lumidenom_%d", mode), Form("lumidenom_%d", mode), nBin, 0., double(nBin));

    den->SetBit(TH1::kIsAverage);

    for (int ibin = 1; ibin < nBin + 1; ++ibin) {
        weights_->SetBinContent(ibin, Lumi_distr[ibin - 1]);
        den->SetBinContent(ibin, MC_distr[ibin - 1]);
    }

    // check integrals, make sure things are normalized

    printf("Normalizing Data PU: %F\n", weights_->Integral());
    weights_->Scale(1.0 / weights_->Integral());
    printf("Normalizing MC PU: %F\n", den->Integral());
    den->Scale(1.0 / den->Integral());

    printf("Data norm = %F  |||  MC norm = %F\n", weights_->Integral(), den->Integral());

    // std::cout << "      Data Input        MC Input         tmp Input" << std::endl;
    // for(int ibin = 1; ibin<nBin+1; ++ibin){
    //  std::cout <<ibin-1 << "     " << weights_->GetBinContent(ibin) <<"       "<<
    //  den->GetBinContent(ibin) << "         "<<tmp->GetBinContent(ibin)<<std::endl;
    //}

    weights_->Divide(den);

    //  weights_->Scale(1/weights_->Integral());//Bugra Bilin, added this to normalize weigts.

    // std::cout << "Reweighting: Computed Weights per In-Time Nint " << std::endl;

    // for(int ibin = 1; ibin<nBin+1; ++ibin){
    // std::cout << "   " << ibin-1 << " " << weights_->GetBinContent(ibin) << std::endl;
    //}

    //   weightOOT_init();
    // std::cout << "=======================================================================" <<
    // std::endl;
}

standalone_LumiReWeighting::~standalone_LumiReWeighting() {}

double standalone_LumiReWeighting::weight(int npv)
{
    int bin = weights_->GetXaxis()->FindBin(npv);
    return weights_->GetBinContent(bin);
}
